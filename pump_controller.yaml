# Underfloor Heating Pump Controller
# ESPHome - Sonoff s26 extended with Dallas temperature sensor
#

esphome:
  name: underfloor-pump-controller
  comment: Underfloor heating pump controller.
  on_boot:
    then:
      - script.execute: load_settings
      - script.execute: controller

esp8266:
  board: esp8285
  restore_from_flash: yes

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

ota:

# Enable logging
logger:

# Enable Home Assistant API
api:

globals:
  # if water temperature below this threshold
  # pump demand automatic will be 'off' (false)
  - id: g_threshold_temp_off
    type: float
    restore_value: yes
    initial_value: "23.0"

  # if water temperature above this threshold
  # pump demand automatic will be 'on' (true)
  - id: g_threshold_temp_on
    type: float
    restore_value: yes
    initial_value: "30.0"

  # manual demand pump
  - id: g_pump_demand_manual
    type: bool
    restore_value: no
    initial_value: "false"

  # true in case anti corrosion is active
  - id: g_pump_demand_anti_corr
    type: boolean
    restore_value: no
    initial_value: "false"

  # demand based on water temperature
  - id: g_pump_demand_automatic
    type: boolean
    restore_value: no
    initial_value: "false"

dallas:
  - pin:
      number: GPIO2
    update_interval: 1s

sensor:
  - platform: dallas
    id: sensor_water_temperature
    name: "Water temperature"
    address: 0xa2012211b5ee6b28
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    filters:
      - delta: 0.1
    on_value:
      then:
        # the controller is notified when the water temperature crosses
        # one of the thresholds
        - lambda: |-
            /* only submit when something has changed */
            auto water_temperature = id(sensor_water_temperature).state;

            if (
              water_temperature < id(g_threshold_temp_off)
              && id(g_pump_demand_automatic))
            {
                  id(g_pump_demand_automatic) = false;
                  id(controller).execute();
            }
            else if (
              water_temperature > id(g_threshold_temp_on)
              && !id(g_pump_demand_automatic))
            {
                  id(g_pump_demand_automatic) = true;
                  id(controller).execute();
            }

number:
  - platform: template
    name: "Threshold on"
    id: sl_threshold_on
    unit_of_measurement: "°C"
    icon: mdi:thermometer-chevron-up
    optimistic: "true"
    step: 1
    min_value: 2
    max_value: 50
    mode: "slider"
    set_action:
      then:
        - lambda: |-
            id(g_threshold_temp_on) = x;
            auto d = id(g_threshold_temp_on) - id(g_threshold_temp_off);
            if (d < 2.0)
            {
              id(g_threshold_temp_off) = id(g_threshold_temp_on) - 2.0;

              auto call = id(sl_threshold_off).make_call();
              call.set_value(id(g_threshold_temp_off));
              call.perform();
            }

  - platform: template
    name: "Threshold off"
    id: sl_threshold_off
    unit_of_measurement: "°C"
    icon: mdi:thermometer-chevron-down
    optimistic: "true"
    step: 1
    min_value: 0
    max_value: 48
    mode: "slider"
    set_action:
      then:
        - lambda: |-
            id(g_threshold_temp_off) = x;
            auto d = id(g_threshold_temp_on) - id(g_threshold_temp_off);
            if (d < 2.0)
            {
              id(g_threshold_temp_on) = id(g_threshold_temp_off) + 2.0;

              auto call = id(sl_threshold_on).make_call();
              call.set_value(id(g_threshold_temp_on));
              call.perform();
            }

binary_sensor:
  # The s26 push button can be used to select the automatic mode and
  # the manual demand. This is an alternative for both template switches
  # sw_automatic_mode and sw_on_off.
  - platform: gpio
    id: s26_push_button
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    on_press:
      then:
        - lambda: id(g_pump_demand_manual) = not id(g_pump_demand_manual);
        - script.execute: controller

  # template sensor to publish pump state
  - platform: template
    name: "Pump"
    id: sensor_pump_state
    lambda: return id(s26_relay).state;

switch:
  # relay, switches pump on and off
  - platform: gpio
    pin: GPIO12
    id: s26_relay

  # Boolean input to control manual demand
  - platform: template
    name: "On/Off"
    id: sw_on_off
    lambda: return id(g_pump_demand_manual);
    turn_on_action:
      - globals.set:
          id: g_pump_demand_manual
          value: "true"
      - script.execute: controller
    turn_off_action:
      - globals.set:
          id: g_pump_demand_manual
          value: "false"
      - script.execute: controller

time:
  - platform: homeassistant
    on_time:
      # schedule anti corrosion action, once a day
      - hours: 1
        minutes: 0
        seconds: 0
        then:
          - globals.set:
              id: g_pump_demand_anti_corr
              value: "true"
          - script.execute: controller
          - delay: 60s
          - globals.set:
              id: g_pump_demand_anti_corr
              value: "false"
          - script.execute: controller

script:
  # script for calculating the demand for the pump. Should
  # it run or not. Applies the changes to the relay.
  - id: controller
    then:
      - lambda: |-
          /* calculate if pump should be on or not */
          bool demand = (
            id(g_pump_demand_anti_corr) ||
            id(g_pump_demand_manual) ||
            id(g_pump_demand_automatic));

          if (demand)
          {
            id(s26_relay).turn_on();
          }
          else
          {
            id(s26_relay).turn_off();
          }

  - id: load_settings
    then:
      # Restore values to sliders
      - lambda: |-
          auto call1 = id(sl_threshold_on).make_call();
          auto call2 = id(sl_threshold_off).make_call();
          call1.set_value(id(g_threshold_temp_on));
          call2.set_value(id(g_threshold_temp_off));
          call1.perform();
          call2.perform();

output:
  - platform: esp8266_pwm
    id: s26_green_led
    pin:
      number: GPIO13
      inverted: True

light:
  - platform: monochromatic
    output: s26_green_led
    id: s26_led
    effects:
      - strobe:
          name: auto_effect
          colors:
            - brightness: 50%
              duration: 1s
            - brightness: 0%
              duration: 9s
